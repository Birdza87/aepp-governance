// ISC License
//
// Copyright (c) 2019, aeternity developers
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
// REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
// AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
// INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
// LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
// OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.


// THIS IS NOT SECURITY AUDITED
// DO NEVER USE THIS WITHOUT SECURITY AUDIT FIRST

contract Poll =

  record overview =
    { address : address
    , title : string
    , is_listed : bool
    , close_height : option(int)
    , votes_count : int }

  record metadata =
    { title : string
    , description : string
    , link : string
    , is_listed : bool }

  type vote_option = map(int, string)

  type votes = map(address, int)

  record state =
    { metadata : metadata
    , vote_options : vote_option
    , close_height : option(int)
    , votes : votes}

  entrypoint init(metadata : metadata, vote_options : vote_option, close_height : option(int)) : state =
    { metadata = metadata,
      vote_options = vote_options,
      close_height = close_height,
      votes = {} }

  stateful entrypoint vote(option : int) =
    // TODO check if vote is closed
    require(Map.member(option, state.vote_options), "VOTE_OPTION_NOT_KNOWN")
    put(state{ votes[Call.caller] = option})

  stateful entrypoint revoke_vote() =
    put(state{ votes = Map.delete(Call.caller, state.votes) })

  entrypoint get_state() : state = state

  entrypoint voted_option(voter : address) : option(int) =
    Map.lookup(voter, state.votes)

  entrypoint overview() : overview =
    { address = Contract.address,
      title = state.metadata.title,
      is_listed = state.metadata.is_listed,
      close_height = state.close_height,
      votes_count = Map.size(state.votes) } //TODO count is not a good metric
