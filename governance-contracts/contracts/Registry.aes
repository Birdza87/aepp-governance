// ISC License
//
// Copyright (c) 2019, aeternity developers
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
// REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
// AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
// INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
// LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
// OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.


// THIS IS NOT SECURITY AUDITED
// DO NEVER USE THIS WITHOUT SECURITY AUDIT FIRST

namespace List =
  function map(f : 'a => 'b, l : list('a)) : list('b) =
    switch(l)
     [] => []
     e :: l' => f(e) :: map(f, l')

contract Poll =

  record overview =
    { address : address
    , title : string
    , is_listed : bool
    , close_height : option(int)
    , votes_count : int }

  entrypoint overview : () => overview

contract Registry =

  type polls = map(int, Poll)

  record state =
    { polls : polls
    , seq_id : int }

  entrypoint init() : state =
    { polls = {},
      seq_id = 0 }

  stateful entrypoint add_poll(poll: Poll) =
    put(state{ polls[state.seq_id] = poll, seq_id = state.seq_id + 1 })

  entrypoint polls_overview() =
    let zip_seq_id_poll_overview = (seq_poll_tuple) =>
      switch(seq_poll_tuple)
        (seq_id, poll) => (seq_id, poll.overview())
    List.map(zip_seq_id_poll_overview, Map.to_list(state.polls))
